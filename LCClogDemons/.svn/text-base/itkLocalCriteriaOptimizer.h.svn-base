#ifndef __itkLocalCriteriaOptimizer_h
#define __itkLocalCriteriaOptimizer_h

#include "itkPDEDeformableRegistrationFunction.h"
#include "itkWarpImageFilter.h"
#include "itkSubtractImageFilter.h"
#include "itkAddImageFilter.h"
#include "itkDiscreteGaussianImageFilter.h"
#include "itkMultiplyImageFilter.h"
#include "itkImageIterator.h"
#include "itkImage.h"
#include "itkLocalIntensityScaling.h"

namespace itk
{
/**
 * \class LocalCriteriaOptimizer
 *
 * \brief Implementation of the local correlation criteria optmizer.
 *
 * This class provides an implementation of the local correlation 
 * coefficient forces computed by minimization of the functional
 * introduced in the P.Cachier's PhD thesis(2004). 
 *
 * Note that this class requires the specification of the standard 
 * deviation of the gaussian smoothing (voxel units) of the similarity criteria. 
 * It also requires the local intensity scaling of the fixed image
 * operated by the itkLocalIntensityScaling filter.
 *
 * \author Marco Lorenzi, INRIA 
 *
 * \ingroup FiniteDifferenceFunctions
 *
 */
template <class TFixedImage, class TMovingImage, class TDeformationField>
class ITK_EXPORT LocalCriteriaOptimizer : 
	public PDEDeformableRegistrationFunction<TFixedImage, TMovingImage, TDeformationField>
	{
	public: 
		typedef LocalCriteriaOptimizer					Self;
		typedef PDEDeformableRegistrationFunction<TFixedImage,TMovingImage, TDeformationField>	
										SuperClass;
		typedef itk::SmartPointer<Self>					Pointer;
		typedef itk::SmartPointer<const Self>				ConstPointer;

		itkNewMacro(Self);

		itkTypeMacro(LocalCriteriaOptimizer,PDEDeformableregistrationFunction);


		typedef TFixedImage				FixedImageType;
		typedef typename TFixedImage::PixelType		FixedImagePixelType; 
	  	typedef typename TFixedImage::ConstPointer	FixedImageConstPointer;
		typedef typename TFixedImage::Pointer		FixedImagePointer;
		typedef typename FixedImageType::SpacingType    SpacingType;
		typedef typename FixedImageType::IndexType      IndexType;
		typedef typename FixedImageType::DirectionType  DirectionType;
			
		typedef TMovingImage				MovingImageType;
		typedef typename TMovingImage::PixelType	MovingImagePixelType; 
	  	typedef typename TMovingImage::ConstPointer	MovingImageConstPointer;
		typedef typename TMovingImage::Pointer		MovingImagePointer;


		itkStaticConstMacro(FixedImageDimension, unsigned int, TFixedImage::ImageDimension);
		typedef typename TDeformationField::PixelType		VectorType;
		typedef typename TDeformationField::Pointer  		VectorImagePointer;
		typedef 	 TDeformationField                      VectorImageType;

		typedef  typename itk::CovariantVector<FixedImagePixelType,FixedImageDimension > CovVectorType;
		typedef  typename itk::Image<CovVectorType,FixedImageDimension> 	CovVectorImageType;
		typedef  typename CovVectorImageType::PixelType    			CovPixelType;
		typedef typename  CovPixelType::ValueType      				ScalarType;
		typedef typename  CovVectorImageType::PixelContainerPointer CovPixelContainerPointer;

		itkStaticConstMacro(MatrixDimension,unsigned int,FixedImageDimension*FixedImageDimension);
		typedef itk::Vector<FixedImagePixelType,MatrixDimension> 		MatrixType;
		typedef itk::Image<MatrixType,FixedImageDimension> 			MatrixImageType;
		typedef typename MatrixImageType::Pointer          			MatrixImagePointer;
		
		typedef double    				                                  CoordRepType;
		typedef InterpolateImageFunction< MovingImageType,CoordRepType>                   InterpolatorType;
	 	typedef typename InterpolatorType::Pointer       				  InterpolatorPointer;
		typedef typename InterpolatorType::PointType      				  PointType;
                typedef LinearInterpolateImageFunction<MovingImageType,CoordRepType>              DefaultInterpolatorType;

		typedef typename SuperClass::FloatOffsetType      FloatOffsetType;
		typedef typename SuperClass::NeighborhoodType     NeighborhoodType;	
		typedef double         TimeStepType;


		typedef typename itk::LocalIntensityScaling <FixedImageType,MovingImageType> IScalingType; 
		typedef typename IScalingType::Pointer 		IScalingPointer;

		typedef itk::WarpImageFilter<MovingImageType,MovingImageType,VectorImageType> WarperType;


		void SetSigma(const double Sigma[] ){for (int i=0;i<FixedImageDimension;++i) m_Sigma[i]=Sigma[i];};

		virtual VectorType ComputeUpdate(  const NeighborhoodType &neighborhood,
				    			    void *globalData,
		                     		            const FloatOffsetType &offset = FloatOffsetType(0.0));

		void SetMovingImageInterpolator( InterpolatorType * ptr )
	    		{ m_MovingImageInterpolator = ptr; m_MovingImageWarper->SetInterpolator( ptr ); }	

		InterpolatorType * GetMovingImageInterpolator(void)
	    				{ return m_MovingImageInterpolator; }

		void InitializeIteration(void);

		virtual TimeStepType ComputeGlobalTimeStep(void * itkNotUsed(GlobalData)) const
	    		{ return m_TimeStep; }

		virtual void *GetGlobalDataPointer() const
			    {
			        GlobalDataStruct *global = new GlobalDataStruct();
		                global->m_SumOfLocalSquaredDifference  = 0.0;
			        global->m_NumberOfPixelsProcessed = 0L;
			        global->m_SumOfLocalSquaredChange      = 0;
			        return global;
			    }

		virtual void ReleaseGlobalDataPointer( void *GlobalData ) const;

		virtual double GetMetric() const
			    { return m_Metric; }
		
		virtual const double &GetRMSChange() const
			    { return m_RMSChange; }

		virtual void SetIntensityDifferenceThreshold(double threshold){m_IntensityDifferenceThreshold=threshold;};		
		virtual double GetIntensityDifferenceThreshold(void) const {return m_IntensityDifferenceThreshold;};		



	protected:
		  LocalCriteriaOptimizer();
		  virtual ~LocalCriteriaOptimizer(){};
		  void PrintSelf(std::ostream& os, Indent indent) const;

		  

		  typedef itk::SubtractImageFilter<CovVectorImageType,CovVectorImageType,CovVectorImageType> SubtracterType;


		  typedef itk::AddImageFilter<FixedImageType,FixedImageType,FixedImageType> ScalarAdderType;
		  typedef itk::SubtractImageFilter<FixedImageType,FixedImageType,FixedImageType> ScalarSubtracterType;

		 struct GlobalDataStruct
		     {
		       double          m_SumOfLocalSquaredDifference;
		       unsigned long   m_NumberOfPixelsProcessed;      
		       double          m_SumOfLocalSquaredChange;
		     };

		void EvaluateHighOrderTerms(void);	
		
		void SetHessian(MatrixImagePointer Hess){ m_SmoothedHess=MatrixImageType::New();   m_SmoothedHess = Hess;};		
		void SetSimGrad(VectorImagePointer Grad){m_SmoothedSimGrad=VectorImageType::New();m_SmoothedSimGrad = Grad;};		
		void SetSimilarityImage(FixedImagePointer Sim){m_SimilarityImage=FixedImageType::New();m_SimilarityImage = Sim;};		
		
	private:
	
		  LocalCriteriaOptimizer(const Self&);
		  void operator=(const Self&);

		VectorImagePointer 			m_Update;

		typename SubtracterType::Pointer 	m_Subtracter;

		typename WarperType::Pointer 		m_MovingImageWarper;
		double 					m_Sigma[FixedImageDimension];
	
		typename FixedImageType::Pointer	m_FixedScaled; 
		typename FixedImageType::Pointer	m_SimilarityImage; 
		typename MatrixImageType::Pointer	m_SmoothedHess; 
		typename VectorImageType::Pointer	m_SmoothedSimGrad;

		
		PointType                       	m_FixedImageOrigin;
		SpacingType         		        m_FixedImageSpacing;
		DirectionType                   	m_FixedImageDirection;
		double                   		m_IntensityDifferenceThreshold;

		typename IScalingType::Pointer 		m_IScaler;

		InterpolatorPointer			m_MovingImageInterpolator;

		mutable double                  	m_Metric;
		mutable double                  	m_SumOfLocalSquaredDifference;
		mutable unsigned long           	m_NumberOfPixelsProcessed;
		mutable double                  	m_RMSChange;
		mutable double                  	m_SumOfLocalSquaredChange;
		

		TimeStepType                    m_TimeStep;	
		mutable SimpleFastMutexLock     m_MetricCalculationLock;


       	};

} // end namespace itk

#ifndef ITK_MANUAL_INSTANTIATION
#include "itkLocalCriteriaOptimizer.txx"
#endif

#endif

