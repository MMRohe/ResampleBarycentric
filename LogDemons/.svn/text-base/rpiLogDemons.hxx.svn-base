#ifndef _RPI_LOG_DEMONS_HXX_
#define _RPI_LOG_DEMONS_HXX_



#include <itkStationaryVelocityFieldTransform.h>
#include <itkDisplacementFieldTransform.h>
#include "rpiRegistrationMethod.hxx"


// Namespace RPI : Registration Programming Interface
namespace rpi
{


/**
 * Log demons registration method. This class is templated:
 *   TFixedImage           Type of the fixed image. Must be an itk::Image.
 *   TMovingImage          Type of the moving image. Must be an itk::Image.
 *   TTransformScalarType  Scalar type of the stationary velocity field transformation. Must be "float" or "double".
 *
 * @author Vincent Garcia, Florence Dru, and Tom Vercauteren
 * @date   2010/10/29
 */
template < class TFixedImage, class TMovingImage, class TTransformScalarType=double >
class LogDemons : public RegistrationMethod< TFixedImage, TMovingImage, TTransformScalarType >{


public:

    enum UpdateRule {
        UPDATE_LOG_DOMAIN,            // 0 : exp(v) <- exp(v) o exp(u)
        UPDATE_SYMMETRIC_LOG_DOMAIN   // 1 : exp(v) <- symmetrized( exp(v) o exp(u) )
    };

    enum GradientType {
        GRADIENT_SYMMETRIZED,
        GRADIENT_FIXED_IMAGE,
        GRADIENT_WARPED_MOVING_IMAGE,
        GRADIENT_MAPPED_MOVING_IMAGE
    };

    typedef itk::StationaryVelocityFieldTransform< TTransformScalarType, TFixedImage::ImageDimension >
            TransformType;

    typedef typename TransformType::Pointer
            TransformPointerType;

    typedef itk::DisplacementFieldTransform< TTransformScalarType, TFixedImage::ImageDimension >
            DisplacementFieldTransformType;

    typedef typename DisplacementFieldTransformType::Pointer
            DisplacementFieldTransformPointerType;


protected:

    /**
     * Number of iterations per level of resolution (from coarse to fine levels).
     */
    std::vector<unsigned int>              m_iterations;


    /**
     * Update rule.
     */
    UpdateRule                             m_updateRule;


    /**
     * Type of gradient used for computing the demons force.
     */
    GradientType                           m_gradientType;


    /**
     * Maximum length of an update vector (voxel units).
     */
    float                                  m_maximumUpdateStepLength;


    /**
     * Standard deviation (world unit) of the update field (Gaussian) smoothing.
     */
    float                                  m_updateFieldStandardDeviation;


    /**
     * Standard deviation (world unit) of the stationary velocity field (Gaussian) smoothing.
     */
    float                                  m_velocityFieldStandardDeviation;


    /**
     * Histogram matching
     */
    bool                                   m_useHistogramMatching;


    /**
     * Number of terms in the BCH expansion.
     */
    unsigned int                           m_BCHExpansion;


    /**
     * Initial transformation.
     */
    TransformPointerType                   m_initialTransform;


    /**
     * Displacement field transformation
     */
    DisplacementFieldTransformPointerType  m_displacementFieldTransform;


public:

    /**
     * Class constructor.
     */
    LogDemons(void);


    /**
     * Class destructor.
     */
    virtual ~LogDemons(void);


    /**
     * Gets the number of iterations per level of resolution.
     * @return  number of iterations
     */
    std::vector<unsigned int>              GetNumberOfIterations(void) const;


    /**
     * Sets the number of iterations per level of resolution.
     * @param  iterations  number of iterations
     */
    void                                   SetNumberOfIterations(std::vector<unsigned int> iterations);


    /**
     * Gets the update rule.
     * @return  update rule
     */
    UpdateRule                             GetUpdateRule(void) const;


    /**
     * Sets the update rule:
     *   LOG_DOMMAIN          : exp(v) <- exp(v) o exp(u)
     *   SYMMETRIC_LOG_DOMAIN : exp(v) <- symmetrized( exp(v) o exp(u) )
     * @param  value  update rule
     */
    void                                   SetUpdateRule(UpdateRule value);


    /**
     * Gets the gradient type used for computing the demons force.
     * @return  gradient type
     */
    GradientType                           GetGradientType(void) const;


    /**
     * Sets the gradient type used for computing the demons force.
     * @param  value  gradient type
     */
    void                                   SetGradientType(GradientType value);


    /**
     * Gets the maximum length of an update vector (voxel units).
     * @return  maximum length
     */
    float                                  GetMaximumUpdateStepLength(void) const;


    /**
     * Sets the maximum length of an update vector (voxel units).
     * Setting it to 0 implies no restrictions will be made on the step length.
     * @param  value  maximum length
     */
    void                                   SetMaximumUpdateStepLength(float value);


    /**
     * Gets the standard deviation (world unit) of the update field (Gaussian) smoothing.
     * Setting it below 0.5 means no smoothing will be performed.
     * @return  standard deviation
     */
    float                                  GetUpdateFieldStandardDeviation(void) const;


    /**
     * Sets the standard deviation (world unit) of the update field (Gaussian) smoothing.
     * @param  value  standard deviation
     */
    void                                   SetUpdateFieldStandardDeviation(float value);


    /**
     * Gets the standard deviation (world unit) of the stationary velocity field (Gaussian) smoothing.
     * Setting it below 0.5 means no smoothing will be performed.
     * @return  standard deviation
     */
    float                                  GetStationaryVelocityFieldStandardDeviation(void) const;


    /**
     * Sets the standard deviation (world unit) of the stationary velocity field (Gaussian) smoothing.
     * @param  value  standard deviation
     */
    void                                   SetStationaryVelocityFieldStandardDeviation(float value);


    /**
     * Does the algorithm uses histogram matching before processing?
     * @return  true if histogram matching is used, and false otherwise.
     */
    bool                                   GetUseHistogramMatching(void) const;


    /**
     * Sets if the algorithm uses histogram matching before processing or not?
     * @param  value  true if histogram matching sould be used, and false otherwise.
     */
    void                                   SetUseHistogramMatching(bool value);


    /**
     * Gets the number of terms in the BCH expansion.
     * @return  number of terms
     */
    unsigned int                           GetNumberOfTermsBCHExpansion(void) const;


    /**
     * Sets the number of terms in the BCH expansion.
     * @param  value  number of terms
     */
    void                                   SetNumberOfTermsBCHExpansion(unsigned int value);


    /**
     * Gets the initial transformation.
     * @return  initial transformation
     */
    TransformPointerType                   GetInitialTransformation(void) const;


    /**
     * Sets the initial transformation.
     * @param  transform  initial transformation
     */
    void                                   SetInitialTransformation(TransformType * transform);


    /**
     * Gets the output displacement field transformation.
     * @return  displacement field transformation
     */
    DisplacementFieldTransformPointerType  GetDisplacementFieldTransformation(void) const;


    /**
     * Performs the image registration. Must be called before GetTransformation().
     */
    virtual void                           StartRegistration(void);

};


} // End of namespace


/** Add the source code file (template) */
#include "rpiLogDemons.cxx"


#endif // _RPI_LOG_DEMONS_HXX_
